// define the DB we're using, and the path to it
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// The data model - has fields for all of our `Link` fields
model Link {
  // @id == this is primary key; @default - how field generated if I don't pass it in
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  description String
  url         String
  // note @relation maps this field to the PK of the other table... 
  // Added `name` becasue theres a 1-many here and many-many for `voters`, so we need to differentiate
  postedBy    User?    @relation(name: "PostedBy", fields: [postedById], references: [id])
  postedById  Int?
  voters      User[]   @relation(name: "Votes")
}

// define a USer schema - not that it holds a collection of Links
model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  links    Link[] @relation(name: "PostedBy")
  // many to many with Link.voters - in DB, new join table, but prisma abstracts it away. Here it's implicit. Can make it explicit by defining a new table here in prisma
  votes    Link[] @relation(name: "Votes")
}
